	    Stephen Riehm's Bracketing macro system for Vim
	    ===============================================

(C)opyright: Stephen Riehm 1991 - 1998

Pre-Script: This file was typed up pretty quickly, using nothing more
	    than my poor little brain and experience. Typos and slight
	    inacuracies are to be expected :-(

Meta Keys - Preamble
====================

    These are some of the most usefull, and at the same time, most
    construed and screwed up features of computers since computers
    appeared on the earth. The problem is that everyone has a
    different view of these babies, and no-one can agree (or even
    bother's to ask) on a suitable standard.

    If you look at the ASCII character set, it obvious that to move
    from a lower case character to an upper case one, all you need to
    do is toggle a single binary bit. This makes sense. Holding the
    shift key down simply sets a bit (in general) and you get your
    upper case character instead of the lower case one. This was all
    well and good, but it wasn't enough, pretty soon they also had
    control keys, Meta Keys and Alt keys (some systems go even
    further!)

    Most computers these days have two keys next to the space bar
    marked "Alt" - ie: Alternative Function. These keys are used
    extensively by M$-Windows programs, but are limited to Emacs and a
    few GUI based programs on Unix. Why? Because you can never tell
    what an Alt key is going to give you. You can almost bet that two
    machines made from two different companies will give you
    completely different results. IBM's AIX doesn't even give you a
    single character, rather, a whole escape sequence!

    So what makes Meta keys different? Basically, they work just like
    a shift key. They toggle the 8'th bit of the ASCII values that you
    would otherwise get from the keyboard. Obviously if you can use
    Meta keys, you almost double the amount of characters that you can
    reliably type on any system - without having to do anything
    complicated. Unfortunately, the latin1 character set means that
    typing a Meta character probably WON'T give you the character you
    might have imagined, but if you take a look at the character set
    as a whole, it's pretty easy to work out why.

So where's the problem?
=======================

    As I said, most computers come with pre-configured Alt keys, which
    means that no matter what I do with my macros here, the chance
    that they will work on your system are pretty darn close to 0.

    So, I used Meta keys, and the chances are still pretty darn close
    to 0 that they will work for you, because, chances are, that your
    computer is configured with Alt keys - such is life!

    What to do?

    If you're using X11, there's a wonderful program which you can use
    to tell X11 that you would rather use Meta keys instead of Alt
    keys - the program is called: xmodmap

    But first, let's check if you really need to use it.

How to check if I already have Meta- or Alt-keys
================================================

    You might like to try, cat(1) with stdin (use Ctrl-D to get back
    to the shell prompt):

	% cat -vte

    then simply type a few characters with the Alt/Meta key pressed
    (as if it was a shift key), and then hit <Return> or <Enter>.
    If you see something like:

	сту$
	M-aM-bM-c$

    you're in luck! - you can use the macros straight away!

    If you see M-? style output, but the characters don't match up,
    ie: typing M-s gives you a M-b, then you should jump to the next
    section.

    If you only see "strange" characters, you'll need to use od(1) to
    see whats hapenning, like this (you'll have to use Ctrl-D to get
    out of od(1)):

	% od -x

    Again, type Meta-a Meta-b Meta-c and then hit <Return>, with a
    little luck you'll see something like this:

	0000000 e1e2 e30a
	0000004

    The output shows you the hexadecimal numbers associated with
    the keys you typed. The good thing is that you can easily check if
    a meta key is related to the same key without holding Meta. Here
    is the output of typing "a <M-a> " and then Ctrl-D (the spaces are
    easy to see, a space is the number '20' in hexadecimal)

	0000000 6120 e100
	0000003

    So here you can see that typing an 'a' gives your program the
    character 0x61, typing a Meta-a gives 0xe1 which just happens to
    be 0x61 + 0x80 !!

    If you work your way through the alphabet, you should see a very
    simple pattern emerge, if not - you've got Alt keys.

    If all else fails, you might like to give xev(1) a try, if it's on
    your system (not on a lot of commercial systems unfortunately).
    This program pops up a little window, simply move the mouse into
    the window and start typing keys, you'll be able to see exactly
    what X11 makes of those keys as you type them, but the output is
    pretty hard to read (there are 2 "events" for every key press, and
    4 events for key presses involving shift, control or meta keys -
    nothing like being pedantic hey :-)

How to turn my Alt keys into Meta Keys?
=======================================

    If you're lucky:
    ----------------

	The first thing to do is to find out the character code of the Alt
	keys. You can do this by typing the folling command:

	    % xmodmap -pk | grep Alt

	in my case, this gives me:

	    keycode  68 = Alt_L
	    keycode  70 = Alt_R

	but your machine will very probably be different! All you need
	to do is replace the "Alt_" bit with "Meta_". Now you can
	create $HOME/.xmodmaps, with something like this:

	    ! Alt Keys are useless, meta keys are better
	    keycode  68 = Meta_L
	    keycode  70 = Meta_R
	    clear mod1
	    add mod1 = Meta_L Meta_R

	OK, now for the big moment, type the following commands, and
	see what happens:

	    # backup the original modmaps, just in case something goes
	    # really awry
	    xmodmap -pke > $HOME/.xmodmaps.original
	    # load up the new xmodmaps
	    xmodmap < $HOME/.xmodmaps
	    # start a new xterm
	    xterm &

	and see if the tests above work. If they do, you can try the
	macros out.

	Now all you need to do is something like this in your .xsession or
	.xinit file:

	    xmodmap $HOME/.xmodmaps

	(By the way, if you want to use the Alt key for something else,
	ie: a window manager key (for popping up menus, jumping between
	windows without using the mouse etc, you can - the window manager
	has no problems with it!))

    If you're unlucky:
    ------------------

	Some machines need a little more coaxing, if that's the case
	for you, you might like to try my little xmodtable perl script
	(perl 4.036 or greater!) which I've included for good measure.
	I wrote this years ago when trying to work out how best to map
	the keyboards on the old HP machines. It worked for me then,
	it seems to work now, but I haven't used it for a long time.
	Otherwise, you've essentially got to "hand map" all the meta
	keys, which should keep most people busy for at least an
	evening or two :-)

	First, back up the existing mappings - just in case you want
	them back again in a hurry.

	    xmodmap -pke > $HOME/.xmodmaps.original

	then run the script, like this:

	    ./xmodtable | sed 's/Alt_/Meta_/' > $HOME/.xmodmaps

	and then load up the new mappings:

	    xmodmap $HOME/.xmodmaps
	
	if you're still a little lucky, starting a new xterm now
	should result in a "working system" (ie: try the tests above
	again). If not, I'm sorry, but I wasn't able to help this
	patient :-(
    
Good Luck!

Stephen Riehm
